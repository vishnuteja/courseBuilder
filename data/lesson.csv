unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Module 5 : Discussion points on Strings,1,What are strings?,,,,,"<dl><dd>Group of characters is a character array. A one-dimensional array of characters is called a string. The difference between any other type of array and string is that a character array ends with a ‘\0’ character.</dd><dd>E.g. char str_name[] = {‘S’, ‘E’, ‘T’ , ‘\0’}; char array str_name, is initialized as we had previously initialized integer array, but here we have added a ‘\0’ at the end. String can also be initialized as char str_name = “SET”; ‘\0’ is automatically added in this case. It is important to know the difference between a character and a string. String is a group of characters. Every element of a string is a character. A string has to end with a ‘\0’. Each character occupies 1 byte in memory and the characters of a string are stored in continuous memory locations. ‘X’ is a character whereas “X” is a string consisting of one character. It is not necessary to mention the size of the array while initializing, but if you specify the size, you should not count ‘\0’ as character. ‘C’ compiler will take care of it. In our example, size of name is 3 and not 4. ‘\0’ being the terminating character of a string indicates end of string.</dd></dl>"
1,Module 5 : Discussion points on Strings,2,How strings can be accessed?,,,,,"<dl><dd>The following program shows how data is entered into a string, character by character and how data is obtained from a string character by character. </dd><dd>Example(1): </dd></dl> <pre>/* Program demonstrate how strings are accessed Data entered in a string character by character<br> and displayed character by character */<br> #include&lt;stdio.h&gt;<br> main( ) {<br>     char poem[10];<br>     int j;<br>     for(j=0;j&lt;10;j++)<br>     {<br>         printf (""\n Enter character&nbsp;%d "",j);<br>         fflush(stdin);<br> /* Block1 */<br>         scanf(""%c"",&amp;poem[j]);<br>     }<br>     for (j = 0;j&lt;10;j++)<br>        printf (""%c"",poem[j] );<br> /* Block 2 */<br> }<br> </pre> <dl><dd>This program is similar to that used for accessing integer arrays. Here ‘\0’ is automatically added to str_name after end of Block 1. Strings have a wide use in text manipulation. Hence a number of other methods are provided for easy access of strings since we know that ‘\0’ is the terminating character of any string. </dd><dd>We can simplify block 2. </dd></dl> <pre>   while (str_name [j]&nbsp;! = ‘\0’ )<br>          printf (“%c”, str_name [j] );<br> </pre> <dl><dd>‘C’ provides a special format specifier, “%s” for inputting a string and displaying it, with the help of which entire string can be accessed instead of going character by character. Block 1 can be change to </dd></dl> <pre>   scanf (“%s”, str_name);<br> </pre> <dl><dd>Block 2 can be changed to printf (“%s”, str_name); counter ‘j’ is not required in this case. </dd><dd>The drawback of scanf and printf is that they can handle only one word at a time. The function gets and puts, can be used as an alternative, they can handle multiword strings. </dd></dl>"
1,Module 5 : Discussion points on Strings,3,Pointers and strings,,,,,"<p>Pointers are variables which store address of other variables. Also address of any variable can be obtained by using ampersand (&amp;) operator. </p> <dl><dd>If we have int j = 3; </dd><dd>Address of j is &amp;j. </dd></dl> <p>A pointer variable can be defined as int *k; where k is a pointer to an integer variable. Hence address of j can be assigned to k as k = &amp;j. Contents of j can be obtained from k using ‘*’ operator. </p> <pre> *k gives 3 i.e. <br>  ‘*’ operator gives contents of address pointer by k. </pre> <p>On a similar basis, what is the address of an array? The name of the array itself is the address of the array. If we have char poem[10]; ‘poem’ gives bases address of this array. If we define character pointer as </p> <pre>  char * ptr;<br>   ptr = poem; </pre> <p>causes ptr to point to the beginning of the array poem. Contents of array can be obtained as </p> <ul><li>(ptr +0), *(ptr +1),…..<br> </li></ul> <p>Instead of poem[1]…. Both are same. </p><p>And an address of array elements as ptr, (ptr +1),……<br> Instead of &amp;poem [0], &amp;poem[1],……Both are same. </p><p>Or instead of using an array of characters of given size and setting a pointer to this array, we can use pointer to character and allocate sufficient memory to it, it will be equivalent. </p><p>According to pointer logic, if ‘S’ is a pointer to character. (*S) are the contents of the address at which ‘S’ points (i.e. value). And ++S pointer to the next character Point to be noted is that pointer is a variable but name of array is not a variable. We can say ptr++ but not poem++ </p>"
1,Module 5 : Discussion points on Strings,4,What are available String functions?,,,,,"<ul><li>	strlen </li><li>	strcmp </li><li>	strcpy </li><li>	strcat </li></ul> <p>C provides a number of in-built string handling functions which can be used directly on <br>strings for getting length of strings, comparing, concatenating string and so on. Following table lists some of these library functions and their purpose. <b>strlen:</b> Finds length of a string<br> <b>strlwr:</b> Converts a string to lower case<br> <b>strupr:</b> Converts a string to uppercase<br> <b>strcat:</b> Appends one string at the end of another<br> <b>strncat:</b> Appends first n character of a string at the end of another<br> <b>strcpy:</b> Copies a string into another<br> <b>strncpy:</b> Copies first n character of one string into another<br> <b>strcmp:</b> Compares two strings<br> <b>strncmp:</b> Compares first n characters of two strings<br> </p>"
1,Module 5 : Discussion points on Strings,5,How string functions are implemented and how they are used?,,,,,"<p>Let us see how strlen ( ), strcmp ( ), strcpy ( ), strcat ( ) can be implemented using arrays as well as pointers. <br> Also how they are used will be seen with an example of each. The name of the string functions suggests <br> their purpose in most cases. The declaration of all these functions is in the header file “string.h”. <br> Hence it is a must to include this header file when we use them.<br> Note: functions implemented using array are appended with an ‘a’ at the beginning of the function name. <br> functions implemented using pointers are appended with a ‘p’ at the beginning of the function name.<br> </p> <dl><dd>E.g. for strlen() </dd><dd>Name of function using arrays is astrlen ( ) </dd><dd>Name of function using pointers is pstrlen ( ) </dd></dl>"
1,Module 5 : Discussion points on Strings,6,strlen(),,,,,"<p>As name suggests, this function is used to get the length of a string i.e. the number of character in a string, excluding the terminating character ‘\0’. <br>Int strlen (const char * s); <br>It accepts address of a string as an argument and returns an integer i.e. length of a string. <br></p><p><b>Implementing strlen ( )</b> <br></p> <br><ul><li>	Array subscript version. <br></li><li>	Pointer version. <br></li></ul> <br><p>Function strlen is already provided and its prototype is written in the header file string.h. We write function astrlen and pstrlen which imitate strlen. Function astrlen uses array to accommodate the string while function pstrlen uses a pointer equivalent to point to the string. <br></p><p>Array subscript version by using astrlen function <br></p> <br><pre>int astrlen (char *s) <br>{ <br>   int len = 0, j = 0; <br>   while (s[j]&nbsp;! = ‘\0’) <br>   { <br>      len + +; <br>      s [j + +]; <br>   } <br>  return (len); <br>} <br></pre> <br><p>Pointer version by using pstrlen function <br></p> <br><pre>int pstrlen (char * s) <br>{ <br>    int len = 0; <br>    while ( ( * s)&nbsp;! = ‘\0’) <br>    { <br>       len + +; <br>       s + +; <br>    } <br>  return (len); <br>} <br></pre> <br><p>All that the function does is, it counts the number of character till string terminating character ‘\0’ is encountered. <br><b>Using strlen()</b><br> <br>The following program shows use of function strlen to calculate length of character array arr. <br></p> <br><pre>#include&lt;stdio.h&gt; <br>#include&lt;string.h&gt; <br>main ( ) <br>{ <br>   int length; <br>   char arr [] = “L&amp;T Infotech”; <br>   length = strlen (arr); <br>   printf (“\n Length of string&nbsp;%s is&nbsp;%d”, arr, length); <br>} <br></pre>"
1,Module 5 : Discussion points on Strings,7,strcmp(),,,,,"<p>Implementing strcmp.<br> <br><b>Using strcmp:</b><br> <br>This function compares two strings. <br></p> <br><pre> int strcmp (const char * s, const char * t); <br></pre> <br><p>It accepts base address of two strings. It returns negative, zero or positive if ‘s’ is less than, equal to or <br>greater than ‘t’. <br></p><p>Implementing strcmp <br></p> <br><ul><li>	Array subscript version. <br></li><li>	Pointer version. <br></li></ul> <br><p>Function strcmp is already provided and its prototype is written in the header file string.h. We will write function astrcmp which imitate strcmp. Function astrcmp uses array to accommodate the string while function pstrcmp uses a pointer equivalent to point to the string. <br></p><p>Array subscript version<br> <br>/ * strcmp&nbsp;: will return<br> <br>&lt; 0 if s &lt; t<br> <br>= 0 if s = = t<br> <br>&gt; 0 if s &gt; t * /<br> <br></p> <br><pre>int astrcmp (char * s, char * t) <br>{ <br>   int j; <br>   for (j = 0; s [j] = = t [j]; j + +) <br>   { <br>      if (s [j] = = ‘\0’) <br>        return 0; <br>   } <br> return (s [j] - t [j]); <br>} <br></pre> <br><p>Pointer version <br></p> <br><pre>int pstrcmp (char * s, char * t) <br>{ <br>    int j; <br>    for (; *s = = *t; s++, t + +) <br>    { <br>        if (*s = = ‘\0’) <br>          return 0; <br>    } <br>  return (* s - * t); <br>} <br></pre> <br><p>Strings ‘s’ and ‘t’ are compared character by character and the position where ‘s’ and ‘t’ do not match, the characters are subtracted which gives numeric difference, between ASCII values of non – matching characters, to get the return value. If end of string ‘s’ occurs before a mismatch, 0 is returned. <br></p><p><b>Using strcmp ()</b><br> <br>The following program shows use of function strcmp to compare two strings. <br></p> <br><pre>#include&lt;stdio.h&gt; <br>#include&lt;string.h&gt; <br>main ( ) <br>{ <br>   char s[10], t[10]; <br>   int v; <br>   printf(""\n Enter 2 strings: ""); <br>   scanf(""%s&nbsp;%s"",s,t); <br>   v = strcmp(s,t); <br>   if (v&gt;0) <br>       printf(""\n First string is greater than second string ""); <br>   else if(v&lt;0) <br>       printf(""\nFirst string is less than second string ""); <br>   else <br>       printf(""\nFirst string is equal to second string ""); <br>} <br></pre> <br><p>Output <br></p> <br><dl><dd>Enter 2 Strings Susan Susan <br></dd><dd>First string is equal to second string <br></dd></dl>"
1,Module 5 : Discussion points on Strings,8,strcpy(),,,,,"<p>This function copies the content of one string to another. <br></p> <br><pre>  char * strcpy (char *t, const char *s); <br></pre> <br><p>Base address of source string and target string are to be supplied to this function as arguments. It returns the target string. <br></p><p><b>Implementing strcpy()</b> <br></p><p>Function strcpy is already provided and its prototype is written in the header file string.h. We write functions astrcpy which imitate strcpy. Function astrcpy uses array to accommodate the string while function pstrcpy uses ‘s’ pointer equivalent to point to the string <br></p><p>Array index version <br></p> <br><pre>astrcpy (char *t, char *s) <br>{ <br>   int j = 0; <br>   while ( (t [j] = s [j])&nbsp;! = ‘\0’) <br>            j + +; <br>} <br></pre> <br><p>Pointer version <br></p> <br><pre>pstrcpy (char *t, char *s) <br>{ <br>    while ( (*t = *s)&nbsp;! = ‘\0’) <br>    { <br>          s + +; <br>          t + +; <br>    } <br>} <br></pre> <br><p>Strcpy copies the characters in source string into the target string, one by one. Care is to be taken to see that target string is large enough to hold the entire source string. <br></p><p><b>Using strcpy()</b> <br></p><p>The following program shows use if function strcpy to copy source string to target string <br></p> <br><pre>#include&lt;stdio.h&gt; <br>#include&lt;string.h&gt; <br>main ( ) <br>{ <br>     char source [] = “Sayonara”; <br>     char target [20]; <br>     strcpy (target, source); <br>     printf (“\n Source string =&nbsp;%s”, source); <br>     printf (“\n Target string =&nbsp;%s”, target); <br>} <br></pre> <br><p>Output <br></p> <br><dl><dd>Source string = Sayonara <br></dd><dd>Target string = Sayonara <br></dd></dl>"
1,Module 5 : Discussion points on Strings,9,strcat(),,,,,"<p>This function concatenates the source string at the end of the target string. Concatenating is appending or adding. <br>E.g. “Good” and “work’ on concatenation gives “Good work”. <br></p> <br><pre>char *strcat (char *t, const char *s); <br></pre> <br><p>It accepts base address of two strings to be concatenated as arguments and returns the target string. <br></p><p><b>Implementing strcat()</b> <br></p><p>Function strcat is already provided and its prototype is written in the header file string.h. We write function astrcat and pstrcat which imitate strcat. Function astrcat uses array to accommodate the string while function pstrcat uses a pointer equivalent to point to the string. <br></p><p>Array index version <br></p> <br><pre>astrcat (char *t, char *s) <br>{ <br>    int j = 0, k = 0; <br>    while (t [j]&nbsp;! = ‘\0’) <br>        t [j + +]; <br>    while ( (t [j] = s [k] )&nbsp;!= ‘\0’) <br>    { <br>         s [k + +]; <br>         t [j + +]; <br>    } <br>} <br></pre> <br><p>Pointer version <br></p> <br><pre>pstrcat (char *t, char *s) <br>{ <br>     while (*t&nbsp;! = ‘\0’) <br>           t + +; <br>     while( (*t = *s)&nbsp;! = ‘\0’) <br>     { <br>           s + +; <br>           t + +; <br>     } <br>} <br></pre> <br><p>The target string has to be large enough to hold the resulting string. <br><b>Using strcat()</b> <br></p><p>The following program shows use of function strcat to concatenate source string to target string. <br></p> <br><pre>#include&lt;stdio.h&gt; <br>#include&lt;string.h&gt; <br>main ( ) <br>{ <br>     char source [] = “Hello”; <br>     char target [30] = “ world!”; <br>     strcat (target, source); <br>     printf (“\nSource string =&nbsp;%s”, source); <br>     printf (“\nTarget string =&nbsp;%s”, target); <br>} <br></pre> <br><p>Output <br></p> <br><dl><dd>Source string =Hello <br></dd><dd>Target string = world! <br></dd></dl>"
1,Module 5 : Discussion points on Strings,10,How can we define array of strings?,,,,,"We have seen 2-dimensional arrays. On the same basis we can have 2-Dimensional array of characters. Imagine them to be string stored one after another. <br></p> <br><pre>char names [5] [10] = { “Akshay”, “Parag”,”Raman”, “Srinivas”, “Gopal”}; <br></pre> <br><p>Above is a 2-dimensional array of characters. The first dimension gives the number of strings in the array and the 2nd dimension gives the length of each array. <br></p><p>Let us write a program of exchanging names in the above array. <br></p><p>Example(2) <br></p> <br><pre>/* Program demonstrating use of two dimensional arrays <br>program exchanges two names */ <br>#include&lt;stdio.h&gt; <br>main ( ) <br>{ <br>      char names [] [10] = {""Akshay"", ""Parag"",""Raman"", ""Srinivas"", ""Gopal""}; <br>      int k; <br>      char t; <br>      printf (""\n Original:&nbsp;%s\t%s"", &amp;names [2][0], &amp;names [3] [0]); <br>      for (k = 0; k &lt;= 9; k++) <br>      { <br>           t = names [2] [k]; <br>           names [2] [k] = names [3] [k]; <br>           names [3] [k] = t; <br>      } <br>      printf (""\n New&nbsp;:&nbsp;%s\t%s "", &amp;names [2] [0], &amp;names [3] [0] ); <br>} <br></pre> <br><p>Output <br></p> <br><dl><dd>Original: Raman Srinivas <br></dd><dd>New:&nbsp;: Srinivas Raman <br></dd></dl> <br><p>To exchange the names we are required to exchange corresponding characters of two names. Also, since 10 characters are not used for all names, the remaining space is wasted in memory. <br></p>"
2,Module 6:Functions I,1,Introduction,,,,,"<p>The basic philosophy of function is divide and conquer by which a complicated tasks are successively divided into simpler and more manageable tasks which can be easily handled. A program can be divided into smaller subprograms that can be developed and tested successfully. <br></p><p>A function is a complete and independent program which is used (or invoked) by the main program or other subprograms. A subprogram receives values called arguments from a calling program, performs calculations and returns the results to the calling program. <br></p><p>A function is a self-contained block of statements that perform a coherent task of some kind. Every C program can be thought of as a collection of these functions. <br></p> <br><h3> <span class=""mw-headline"" id=""Learning_Objective"">Learning Objective </span></h3> <br><hr> <br><p>In this session you will learn how to define functions and learn about various types of functions like Functions without arguments and return values, Functions with arguments but no return values, Functions with arguments and return values."
2,Module 6:Functions I,2,Resources,,,,,"<hr> <br><p>Video lecture details <br></p> <br><ul><li>	The first two videos tells complete details about functions. <br></li><li>	Third video tells about global variables with respective functions. <br></li><li>	Forth video tells about function with parameters  in detailed notation. <br></li><li>	Fifth video is very important one which will tells us about function with return type. <br></li><li>	Sixth video will tells  us above function prototypes <br></li><li>	The last video covers basics  of functions and focused on recursive functions <br></li></ul> <br><p><b>Note:</b> All these videos will illustrate the appropriate worked examples on Dev C++ IDE<br>      <br></p> <br><ul><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1001.mov"">Functions 1--8 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1002.mov"">Functions  2--13 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1003.mov"">Global variables--13 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1004.mov"">Functions with arguments--19 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1005.mov"">Functions with return--20 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1006.mov"">Function prototypes--11 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/04.wmv"">Video Lecture - Functions -- 36 Mins</a> <b>Courtesy IIT Kharagpur</b> <br></li></ul> <br><h3> <span class=""mw-headline"" id=""Web_Resources""> Web Resources </span></h3> <br><ul><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/W2/f1.htm"">Functions resource-I </a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/W2/f2.htm"">Functions resource-II </a> <br></li></ul> <br> <ul><li><a rel=""nofollow"" class=""external free"" href=""http://www.tpub.com/neets/book13/53j.htm"">http://www.tpub.com/neets/book13/53j.htm</a> <br></li></ul>"
2,Module 6:Functions I,3,Problem Set A:-,,,,,"<div id=""psbg""> <br><dl><dd><ol><li> Write a C program in which <b>main()</b> function calls a function <b>subtract</b>, which subtract two integers and prints the output in function <b>subtract</b> itself. (Function should not return any value.) <br></li></ol> <br></dd><dd><b>Hint</b>: Use void function <br></dd><dd><pre>Name the program as: PA1_void_sub.c</pre> <br></dd></dl> <br></div> <br><p><b>Note&nbsp;:</b> to do this task you just walk through the following videos <br></p> <br><ul><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1006.mov"">Function prototypes--11 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1001.mov"">Functions 1--8 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1002.mov"">Functions  2--13 Mins</a> <br></li></ul> <br><p><b>Inference questions</b> <br></p> <br><ol><li>	The terms function and subroutine are same? <br></li><li>	What is the difference between function and procedure? <br></li><li>	Are functions reusable? <br></li><li>	What is void? <br></li></ol> <br><div id=""psbg""> <br><dl><dd><b>2.</b> Write a C program with a function print_lines(char x, int count, int spaces, int lines) that takes four arguments: a character and three integers. First argument specifies the character is to be printed, the second argument specifies the number of times that the character to be printed on a line, the third argument specifies the number of spaces between two characters on the same line and the fourth argument specifies the number of lines to be printed. <br></dd></dl> <br><pre>   Example: print_lines(s, 3, 2, 4) should print <br>      s  s  s <br>      s  s  s <br>      s  s  s <br>      s  s  s <br></pre> <br></div> <br><p><b>Note:</b> to do this task you just walk through the following videos <br></p> <br><ul><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1003.mov"">Global variables--13 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1004.mov"">Functions with arguments--19 Mins</a> <br></li><li><a rel=""nofollow"" class=""external text"" href=""http://wiki2012.msitprogram.net/ITW/CProg/Cvideos/Cvideo2/1005.mov"">Functions with return--20 Mins</a> <br></li></ul> <br><p><b>Inference questions</b> <br></p> <br><ol><li>	What are function arguments or parameters? <br></li><li>	What do you mean by function return type? <br></li><li>	What is the difference between called function and calling function? <br></li><li>	Diffrence between actual arguments and formal arguments? <br></li></ol>"
2,Module 6:Functions I,4,Problem Set B:-,,,,,"<div id=""psbg""> <br><dl><dd><ol><li> Write a C program with a function subtract, which subtract the two integers in the function subtract() and returns the subtracted value to the <b>main</b> function and prints the output in the main function. <br></li></ol> <br></dd></dl> <br><pre>Name the program as: PB1_return_subtract.c</pre> <br></div>"
2,Module 6:Functions I,5,Bonus Problem:-,,,,,"<div id=""psbg""> <br><ol><li>Write a program to print conversion table from 0 to 20. Write functions to convert decimal to binary (to_binary(int x)) and decimal to octal (to_octal(int x)). <br></li></ol> <br></div> <br><p>Example: <br></p> <br><div class=""center""><div class=""floatnone""><a href=""http://wiki2012.msitprogram.net/index.php?title=Special:Upload&wpDestFile=Functions1.png"" class=""new"" title=""File:Functions1.png"">400px</a></div></div>"
2,Module 6:Functions I,6,Deliverables,,,,,"<hr> <br><p>Zip all the files as &lt;rollno&gt;_C_W2_M6.zip <br></p><p>The zip file should contain the following files. <br></p> <br><ol><li>PA1_void_add.c <br></li><li>PA2_print_lines.c <br></li><li>PB1_return_add.c <br></li><li>PBonus_conversion.c <br></li></ol> <br><p>Submit the zip file through moodle before the deadline 6:00PM. <br></p>"
